import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pandas as pd
import numpy as np
from datetime import datetime, time, timedelta
import os
import threading
import io

class TimesheetCalculatorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("H·ªá Th·ªëng T√≠nh Gi·ªù C√¥ng - v1.0")
        self.root.geometry("900x700")
        self.root.resizable(True, True)
        
        # Thi·∫øt l·∫≠p icon v√† style
        self.setup_styles()
        self.create_widgets()
        
        # Bi·∫øn l∆∞u tr·ªØ
        self.input_file_path = None
        self.output_file_path = None
        self.df_result = None
        
    def setup_styles(self):
        """Thi·∫øt l·∫≠p style cho ·ª©ng d·ª•ng"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # C·∫•u h√¨nh m√†u s·∫Øc
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'), foreground='#2c3e50')
        style.configure('Header.TLabel', font=('Arial', 12, 'bold'), foreground='#34495e')
        style.configure('Info.TLabel', font=('Arial', 10), foreground='#7f8c8d')
        style.configure('Success.TLabel', font=('Arial', 10, 'bold'), foreground='#27ae60')
        style.configure('Error.TLabel', font=('Arial', 10, 'bold'), foreground='#e74c3c')
        
    def create_widgets(self):
        """T·∫°o giao di·ªán ch√≠nh"""
        # Main frame
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # C·∫•u h√¨nh grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # Title
        title_label = ttk.Label(main_frame, text="‚è∞ H·ªÜ TH·ªêNG T√çNH GI·ªú C√îNG", style='Title.TLabel')
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # Section 1: File Input
        input_frame = ttk.LabelFrame(main_frame, text="üìÅ Ch·ªçn File Excel", padding="15")
        input_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        input_frame.columnconfigure(1, weight=1)
        
        ttk.Label(input_frame, text="File Excel:", style='Header.TLabel').grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        self.file_path_var = tk.StringVar()
        self.file_entry = ttk.Entry(input_frame, textvariable=self.file_path_var, state='readonly')
        self.file_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        self.browse_btn = ttk.Button(input_frame, text="Ch·ªçn File", command=self.browse_file)
        self.browse_btn.grid(row=0, column=2)
        
        # File info
        self.file_info_var = tk.StringVar()
        self.file_info_label = ttk.Label(input_frame, textvariable=self.file_info_var, style='Info.TLabel')
        self.file_info_label.grid(row=1, column=0, columnspan=3, sticky=tk.W, pady=(10, 0))
        
        # Section 2: Rules
        rules_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è Quy T·∫Øc T√≠nh Gi·ªù", padding="15")
        rules_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        rules_text = """‚Ä¢ Gi·ªù v√†o s·ªõm nh·∫•t: 7h30 (n·∫øu v√†o tr∆∞·ªõc 7h30 th√¨ t√≠nh l√† 7h30)
‚Ä¢ Ngh·ªâ tr∆∞a: T·ª± ƒë·ªông tr·ª´ 1 ti·∫øng
‚Ä¢ Gi·ªù th∆∞·ªùng: T·ªëi ƒëa 8 ti·∫øng/ng√†y
‚Ä¢ Gi·ªù OT: Ph·∫ßn v∆∞·ª£t qu√° 8 ti·∫øng/ng√†y"""
        
        ttk.Label(rules_frame, text=rules_text, style='Info.TLabel').grid(row=0, column=0, sticky=tk.W)
        
        # Section 3: Process
        process_frame = ttk.LabelFrame(main_frame, text="üîÑ X·ª≠ L√Ω D·ªØ Li·ªáu", padding="15")
        process_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        process_frame.columnconfigure(0, weight=1)
        
        self.process_btn = ttk.Button(process_frame, text="üöÄ T√≠nh To√°n Gi·ªù C√¥ng", command=self.process_file, state='disabled')
        self.process_btn.grid(row=0, column=0, pady=(0, 10))
        
        # Progress bar
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(process_frame, variable=self.progress_var, mode='determinate')
        self.progress_bar.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Status
        self.status_var = tk.StringVar(value="S·∫µn s√†ng. H√£y ch·ªçn file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        self.status_label = ttk.Label(process_frame, textvariable=self.status_var, style='Info.TLabel')
        self.status_label.grid(row=2, column=0, sticky=tk.W)
        
        # Section 4: Results
        results_frame = ttk.LabelFrame(main_frame, text="üìä K·∫øt Qu·∫£", padding="15")
        results_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        results_frame.columnconfigure(1, weight=1)
        
        # Statistics
        self.stats_frame = ttk.Frame(results_frame)
        self.stats_frame.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Export section
        ttk.Label(results_frame, text="Xu·∫•t file:", style='Header.TLabel').grid(row=1, column=0, sticky=tk.W, padx=(0, 10))
        
        self.output_path_var = tk.StringVar()
        self.output_entry = ttk.Entry(results_frame, textvariable=self.output_path_var, state='readonly')
        self.output_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        self.export_btn = ttk.Button(results_frame, text="üíæ Xu·∫•t Excel", command=self.export_file, state='disabled')
        self.export_btn.grid(row=1, column=2)
        
        # Section 5: Log
        log_frame = ttk.LabelFrame(main_frame, text="üìù Log", padding="15")
        log_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        # Text widget with scrollbar
        text_frame = ttk.Frame(log_frame)
        text_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        text_frame.columnconfigure(0, weight=1)
        text_frame.rowconfigure(0, weight=1)
        
        self.log_text = tk.Text(text_frame, height=8, wrap=tk.WORD)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=self.log_text.yview)
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        # Clear log button
        ttk.Button(log_frame, text="üóëÔ∏è X√≥a Log", command=self.clear_log).grid(row=1, column=0, pady=(10, 0))
        
        # Configure row weights
        main_frame.rowconfigure(5, weight=1)
        
    def log_message(self, message):
        """Th√™m message v√†o log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_entry)
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    def clear_log(self):
        """X√≥a log"""
        self.log_text.delete(1.0, tk.END)
        
    def browse_file(self):
        """Ch·ªçn file Excel"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file Excel ch·∫•m c√¥ng",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        
        if file_path:
            self.input_file_path = file_path
            self.file_path_var.set(file_path)
            
            # ƒê·ªçc th√¥ng tin file
            try:
                df = pd.read_excel(file_path)
                file_size = os.path.getsize(file_path) / 1024  # KB
                self.file_info_var.set(f"‚úÖ File h·ª£p l·ªá - {len(df)} d√≤ng, {len(df.columns)} c·ªôt, {file_size:.1f} KB")
                
                # Ki·ªÉm tra c·ªôt c·∫ßn thi·∫øt
                required_columns = ['H·ªç t√™n', 'Ng√†y ch·ªët', 'Gi·ªù ch·ªët']
                missing_columns = [col for col in required_columns if col not in df.columns]
                
                if missing_columns:
                    self.file_info_var.set(f"‚ùå Thi·∫øu c·ªôt: {', '.join(missing_columns)}")
                    self.process_btn.configure(state='disabled')
                    self.log_message(f"‚ùå File thi·∫øu c·ªôt b·∫Øt bu·ªôc: {', '.join(missing_columns)}")
                    self.log_message(f"C√°c c·ªôt hi·ªán c√≥: {', '.join(df.columns.tolist())}")
                else:
                    self.process_btn.configure(state='normal')
                    self.log_message(f"‚úÖ ƒê√£ ch·ªçn file: {os.path.basename(file_path)}")
                    
            except Exception as e:
                self.file_info_var.set(f"‚ùå L·ªói ƒë·ªçc file: {str(e)}")
                self.process_btn.configure(state='disabled')
                self.log_message(f"‚ùå L·ªói ƒë·ªçc file: {str(e)}")
    
    def preprocess_timesheet_data(self, df):
        """
        Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu timesheet v·ªõi c·∫•u tr√∫c Ng√†y ch·ªët v√† Gi·ªù ch·ªët
        H·ªó tr·ª£ c·∫£ ƒë·ªãnh d·∫°ng 24h (HH:MM:SS) v√† 12h (HH:MM:SS AM/PM)
        """
        df_processed = df.copy()
        
        # Chu·∫©n h√≥a t√™n c·ªôt
        df_processed = df_processed.rename(columns={
            'H·ªç t√™n': 'employee_name',
            'Ng√†y ch·ªët': 'date',
            'Gi·ªù ch·ªët': 'time_stamp'
        })
        
        # Chuy·ªÉn ƒë·ªïi c·ªôt ng√†y
        df_processed['date'] = pd.to_datetime(df_processed['date'])
        
        # Chuy·ªÉn ƒë·ªïi c·ªôt gi·ªù - h·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng
        def parse_time_flexible(time_str):
            """
            Parse th·ªùi gian linh ho·∫°t cho c·∫£ 24h v√† 12h format
            """
            if pd.isna(time_str):
                return None
                
            time_str = str(time_str).strip()
            
            # Danh s√°ch c√°c format ƒë·ªÉ th·ª≠
            time_formats = [
                '%H:%M:%S',           # 14:30:00
                '%I:%M:%S %p',        # 02:30:00 PM
                '%H:%M',              # 14:30
                '%I:%M %p',           # 02:30 PM
                '%I:%M:%S%p',         # 02:30:00PM (kh√¥ng c√≥ space)
                '%I:%M%p',            # 02:30PM (kh√¥ng c√≥ space)
            ]
            
            for fmt in time_formats:
                try:
                    parsed_time = datetime.strptime(time_str, fmt)
                    return parsed_time.time()
                except ValueError:
                    continue
            
            # N·∫øu kh√¥ng parse ƒë∆∞·ª£c, th·ª≠ regex ƒë·ªÉ extract
            import re
            
            # Pattern cho 12-hour format v·ªõi AM/PM
            pattern_12h = r'(\d{1,2}):(\d{2})(?::(\d{2}))?\s*(AM|PM|am|pm)'
            match = re.search(pattern_12h, time_str, re.IGNORECASE)
            
            if match:
                hour = int(match.group(1))
                minute = int(match.group(2))
                second = int(match.group(3)) if match.group(3) else 0
                am_pm = match.group(4).upper()
                
                # Chuy·ªÉn ƒë·ªïi 12h sang 24h
                if am_pm == 'PM' and hour != 12:
                    hour += 12
                elif am_pm == 'AM' and hour == 12:
                    hour = 0
                    
                return time(hour, minute, second)
            
            # Pattern cho 24-hour format
            pattern_24h = r'(\d{1,2}):(\d{2})(?::(\d{2}))?'
            match = re.search(pattern_24h, time_str)
            
            if match:
                hour = int(match.group(1))
                minute = int(match.group(2))
                second = int(match.group(3)) if match.group(3) else 0
                
                if 0 <= hour <= 23 and 0 <= minute <= 59 and 0 <= second <= 59:
                    return time(hour, minute, second)
            
            return None
        
        # √Åp d·ª•ng parse function
        df_processed['time_stamp'] = df_processed['time_stamp'].apply(parse_time_flexible)
        
        # Lo·∫°i b·ªè nh·ªØng d√≤ng c√≥ th·ªùi gian null
        df_processed = df_processed.dropna(subset=['time_stamp'])
        
        # S·∫Øp x·∫øp theo nh√¢n vi√™n, ng√†y v√† gi·ªù
        df_processed = df_processed.sort_values(['employee_name', 'date', 'time_stamp'])
        
        return df_processed
    
    def calculate_work_hours(self, df):
        """T√≠nh to√°n gi·ªù l√†m vi·ªác v√† gi·ªù OT"""
        result_data = []
        total_groups = len(df.groupby(['employee_name', 'date']))
        current_group = 0
        
        # Group theo nh√¢n vi√™n v√† ng√†y
        for (employee, date), group in df.groupby(['employee_name', 'date']):
            current_group += 1
            progress = (current_group / total_groups) * 100
            self.progress_var.set(progress)
            self.root.update_idletasks()
            
            # S·∫Øp x·∫øp theo th·ªùi gian trong ng√†y
            group = group.sort_values('time_stamp')
            times = group['time_stamp'].tolist()
            
            if len(times) >= 2:
                # L·∫•y th·ªùi gian ƒë·∫ßu ti√™n l√† check_in, cu·ªëi c√πng l√† check_out
                check_in = times[0]
                check_out = times[-1]
                
                # √Åp d·ª•ng quy t·∫Øc: n·∫øu v√†o tr∆∞·ªõc 7:30 th√¨ t√≠nh l√† 7:30
                earliest_start = time(7, 30)
                if check_in < earliest_start:
                    adjusted_check_in = earliest_start
                else:
                    adjusted_check_in = check_in
                
                # T√≠nh t·ªïng th·ªùi gian
                check_in_dt = datetime.combine(datetime.today(), adjusted_check_in)
                check_out_dt = datetime.combine(datetime.today(), check_out)
                
                # N·∫øu check_out < check_in (qua ng√†y), th√™m 1 ng√†y
                if check_out_dt < check_in_dt:
                    check_out_dt += timedelta(days=1)
                
                total_time = check_out_dt - check_in_dt
                total_hours = total_time.total_seconds() / 3600
                
                # Tr·ª´ 1 ti·∫øng ngh·ªâ tr∆∞a
                work_time = max(0, total_hours - 1)
                
                # T√≠nh gi·ªù th∆∞·ªùng v√† OT
                # Gi·ªù th∆∞·ªùng t·ªëi ƒëa 8 ti·∫øng/ng√†y
                regular_hours = min(work_time, 8)
                overtime_hours = max(0, work_time - 8)
                
                result_data.append({
                    'employee_name': employee,
                    'date': date,
                    'check_in_original': str(check_in),
                    'check_out_original': str(check_out),
                    'check_in_adjusted': str(adjusted_check_in),
                    'total_time_with_lunch': round(total_hours, 2),
                    'work_hours': round(work_time, 2),
                    'regular_hours': round(regular_hours, 2),
                    'overtime_hours': round(overtime_hours, 2),
                    'number_of_punches': len(times)
                })
            else:
                # Kh√¥ng ƒë·ªß d·ªØ li·ªáu ch·∫•m c√¥ng
                result_data.append({
                    'employee_name': employee,
                    'date': date,
                    'check_in_original': str(times[0]) if times else 'N/A',
                    'check_out_original': 'N/A',
                    'check_in_adjusted': 'N/A',
                    'total_time_with_lunch': 0,
                    'work_hours': 0,
                    'regular_hours': 0,
                    'overtime_hours': 0,
                    'number_of_punches': len(times)
                })
        
        return pd.DataFrame(result_data)
    
    def update_statistics(self, df_result):
        """C·∫≠p nh·∫≠t th·ªëng k√™"""
        # X√≥a stats c≈©
        for widget in self.stats_frame.winfo_children():
            widget.destroy()
        
        # T√≠nh to√°n th·ªëng k√™
        total_employees = df_result['employee_name'].nunique()
        total_work_days = len(df_result)
        total_work_hours = df_result['work_hours'].sum()
        total_ot_hours = df_result['overtime_hours'].sum()
        
        # Hi·ªÉn th·ªã th·ªëng k√™
        stats = [
            ("üë• Nh√¢n vi√™n:", total_employees),
            ("üìÖ Ng√†y l√†m vi·ªác:", total_work_days),
            ("‚è∞ T·ªïng gi·ªù LV:", f"{total_work_hours:.1f}h"),
            ("üî• T·ªïng gi·ªù OT:", f"{total_ot_hours:.1f}h")
        ]
        
        for i, (label, value) in enumerate(stats):
            ttk.Label(self.stats_frame, text=label, style='Header.TLabel').grid(row=0, column=i*2, sticky=tk.W, padx=(0, 5))
            ttk.Label(self.stats_frame, text=str(value), style='Success.TLabel').grid(row=0, column=i*2+1, sticky=tk.W, padx=(0, 20))
    
    def process_file(self):
        """X·ª≠ l√Ω file Excel"""
        if not self.input_file_path:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file Excel tr∆∞·ªõc!")
            return
        
        def process_thread():
            try:
                self.process_btn.configure(state='disabled')
                self.progress_var.set(0)
                self.status_var.set("ƒêang ƒë·ªçc file Excel...")
                self.log_message("üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file...")
                
                # ƒê·ªçc file Excel
                df = pd.read_excel(self.input_file_path)
                self.log_message(f"‚úÖ ƒê√£ ƒë·ªçc {len(df)} d√≤ng d·ªØ li·ªáu")
                
                # Ti·ªÅn x·ª≠ l√Ω
                self.status_var.set("ƒêang ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu...")
                df_processed = self.preprocess_timesheet_data(df)
                self.log_message("‚úÖ Ho√†n th√†nh ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")
                
                # T√≠nh to√°n gi·ªù c√¥ng
                self.status_var.set("ƒêang t√≠nh to√°n gi·ªù c√¥ng...")
                self.df_result = self.calculate_work_hours(df_processed)
                self.log_message(f"‚úÖ ƒê√£ t√≠nh to√°n {len(self.df_result)} ng√†y l√†m vi·ªác")
                
                # C·∫≠p nh·∫≠t th·ªëng k√™
                self.update_statistics(self.df_result)
                
                # Ki·ªÉm tra d·ªØ li·ªáu thi·∫øu
                incomplete_data = self.df_result[self.df_result['number_of_punches'] < 2]
                if len(incomplete_data) > 0:
                    self.log_message(f"‚ö†Ô∏è Ph√°t hi·ªán {len(incomplete_data)} ng√†y c√≥ d·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß")
                
                self.progress_var.set(100)
                self.status_var.set("‚úÖ Ho√†n th√†nh! S·∫µn s√†ng xu·∫•t file Excel.")
                self.export_btn.configure(state='normal')
                self.log_message("üéâ X·ª≠ l√Ω ho√†n t·∫•t! B·∫°n c√≥ th·ªÉ xu·∫•t file Excel.")
                
            except Exception as e:
                self.log_message(f"‚ùå L·ªói x·ª≠ l√Ω: {str(e)}")
                self.status_var.set(f"‚ùå L·ªói: {str(e)}")
                messagebox.showerror("L·ªói x·ª≠ l√Ω", f"ƒê√£ x·∫£y ra l·ªói:\n{str(e)}")
            
            finally:
                self.process_btn.configure(state='normal')
        
        # Ch·∫°y trong thread ri√™ng
        threading.Thread(target=process_thread, daemon=True).start()
    
    def export_file(self):
        """Xu·∫•t file Excel"""
        if self.df_result is None:
            messagebox.showerror("L·ªói", "Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!")
            return
        
        # Ch·ªçn v·ªã tr√≠ l∆∞u file
        current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_filename = f"bao_cao_gio_cong_{current_time}.xlsx"
        
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u b√°o c√°o Excel",
            defaultextension=".xlsx",
            initialname=default_filename,
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                self.status_var.set("ƒêang xu·∫•t file Excel...")
                self.log_message(f"üì§ ƒêang xu·∫•t file: {os.path.basename(file_path)}")
                
                with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                    # Sheet 1: D·ªØ li·ªáu chi ti·∫øt
                    self.df_result.to_excel(writer, sheet_name='Chi ti·∫øt gi·ªù c√¥ng & OT', index=False)
                    
                    # Sheet 2: Th·ªëng k√™ theo nh√¢n vi√™n
                    employee_stats = self.df_result.groupby('employee_name').agg({
                        'work_hours': ['sum', 'mean', 'count'],
                        'regular_hours': ['sum', 'mean'],
                        'overtime_hours': ['sum', 'mean']
                    }).round(2)
                    employee_stats.columns = [
                        'T·ªïng gi·ªù LV', 'TB gi·ªù LV/ng√†y', 'S·ªë ng√†y l√†m',
                        'T·ªïng gi·ªù th∆∞·ªùng', 'TB gi·ªù th∆∞·ªùng/ng√†y',
                        'T·ªïng gi·ªù OT', 'TB gi·ªù OT/ng√†y'
                    ]
                    employee_stats.to_excel(writer, sheet_name='Th·ªëng k√™ nh√¢n vi√™n')
                    
                    # Sheet 3: Th·ªëng k√™ theo ng√†y
                    daily_stats = self.df_result.groupby('date').agg({
                        'work_hours': ['sum', 'mean'],
                        'regular_hours': 'sum',
                        'overtime_hours': 'sum',
                        'employee_name': 'count'
                    }).round(2)
                    daily_stats.columns = ['T·ªïng gi·ªù LV', 'TB gi·ªù/ng∆∞·ªùi', 'T·ªïng gi·ªù th∆∞·ªùng', 'T·ªïng gi·ªù OT', 'S·ªë ng∆∞·ªùi']
                    daily_stats.to_excel(writer, sheet_name='Th·ªëng k√™ theo ng√†y')
                    
                    # Sheet 4: Ranking OT
                    ot_ranking = self.df_result.groupby('employee_name').agg({
                        'overtime_hours': ['sum', 'mean', 'count']
                    }).round(2)
                    ot_ranking.columns = ['T·ªïng gi·ªù OT', 'TB gi·ªù OT/ng√†y', 'S·ªë ng√†y c√≥ OT']
                    ot_ranking = ot_ranking.sort_values('T·ªïng gi·ªù OT', ascending=False)
                    ot_ranking.to_excel(writer, sheet_name='Ranking OT')
                
                self.output_path_var.set(file_path)
                self.status_var.set("‚úÖ ƒê√£ xu·∫•t file th√†nh c√¥ng!")
                self.log_message(f"‚úÖ ƒê√£ xu·∫•t file th√†nh c√¥ng: {os.path.basename(file_path)}")
                
                # H·ªèi c√≥ mu·ªën m·ªü file kh√¥ng
                if messagebox.askyesno("Th√†nh c√¥ng", "ƒê√£ xu·∫•t file th√†nh c√¥ng!\nB·∫°n c√≥ mu·ªën m·ªü file n√†y kh√¥ng?"):
                    os.startfile(file_path)
                
            except Exception as e:
                self.log_message(f"‚ùå L·ªói xu·∫•t file: {str(e)}")
                messagebox.showerror("L·ªói xu·∫•t file", f"ƒê√£ x·∫£y ra l·ªói khi xu·∫•t file:\n{str(e)}")

def main():
    root = tk.Tk()
    app = TimesheetCalculatorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
