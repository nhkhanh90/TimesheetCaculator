import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, time, timedelta
import io
import warnings
warnings.filterwarnings('ignore')

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="H·ªá Th·ªëng T√≠nh Gi·ªù C√¥ng",
    page_icon="‚è∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1e3a8a;
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 2rem;
    }
    .sub-header {
        color: #3b82f6;
        font-size: 1.2rem;
        margin-bottom: 1rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        color: #856404;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def preprocess_timesheet_data(df):
    """
    Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu timesheet v·ªõi c·∫•u tr√∫c Ng√†y ch·ªët v√† Gi·ªù ch·ªët
    """
    df_processed = df.copy()
    
    # Chu·∫©n h√≥a t√™n c·ªôt
    df_processed = df_processed.rename(columns={
        'H·ªç t√™n': 'employee_name',
        'Ng√†y ch·ªët': 'date',
        'Gi·ªù ch·ªët': 'time_stamp'
    })
    
    # Chuy·ªÉn ƒë·ªïi c·ªôt ng√†y
    df_processed['date'] = pd.to_datetime(df_processed['date'])
    
    # Chuy·ªÉn ƒë·ªïi c·ªôt gi·ªù - s·ª≠ d·ª•ng string ƒë·ªÉ tr√°nh l·ªói Arrow
    try:
        # Th·ª≠ chuy·ªÉn ƒë·ªïi th√†nh datetime r·ªìi l·∫•y time
        df_processed['time_stamp'] = pd.to_datetime(df_processed['time_stamp'], format='%H:%M:%S').dt.time
        # Chuy·ªÉn th√†nh string ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi Arrow
        df_processed['time_stamp_str'] = df_processed['time_stamp'].astype(str)
    except:
        # N·∫øu l·ªói, gi·ªØ nguy√™n d·∫°ng string
        df_processed['time_stamp_str'] = df_processed['time_stamp'].astype(str)
        # Parse l·∫°i th√†nh time object
        df_processed['time_stamp'] = pd.to_datetime(df_processed['time_stamp_str'], format='%H:%M:%S').dt.time
    
    # S·∫Øp x·∫øp theo nh√¢n vi√™n, ng√†y v√† gi·ªù
    df_processed = df_processed.sort_values(['employee_name', 'date', 'time_stamp'])
    
    return df_processed

def calculate_work_hours(df):
    """
    T√≠nh to√°n gi·ªù l√†m vi·ªác v√† gi·ªù OT t·ª´ d·ªØ li·ªáu ch·∫•m c√¥ng
    """
    result_data = []
    
    # Group theo nh√¢n vi√™n v√† ng√†y
    for (employee, date), group in df.groupby(['employee_name', 'date']):
        # S·∫Øp x·∫øp theo th·ªùi gian trong ng√†y
        group = group.sort_values('time_stamp')
        times = group['time_stamp'].tolist()
        
        if len(times) >= 2:
            # L·∫•y th·ªùi gian ƒë·∫ßu ti√™n l√† check_in, cu·ªëi c√πng l√† check_out
            check_in = times[0]
            check_out = times[-1]
            
            # √Åp d·ª•ng quy t·∫Øc: n·∫øu v√†o tr∆∞·ªõc 7:30 th√¨ t√≠nh l√† 7:30
            earliest_start = time(7, 30)
            if check_in < earliest_start:
                adjusted_check_in = earliest_start
            else:
                adjusted_check_in = check_in
            
            # T√≠nh t·ªïng th·ªùi gian
            check_in_dt = datetime.combine(datetime.today(), adjusted_check_in)
            check_out_dt = datetime.combine(datetime.today(), check_out)
            
            # N·∫øu check_out < check_in (qua ng√†y), th√™m 1 ng√†y
            if check_out_dt < check_in_dt:
                check_out_dt += timedelta(days=1)
            
            total_time = check_out_dt - check_in_dt
            total_hours = total_time.total_seconds() / 3600
            
            # Tr·ª´ 1 ti·∫øng ngh·ªâ tr∆∞a
            work_time = max(0, total_hours - 1)
            
            # T√≠nh gi·ªù th∆∞·ªùng v√† OT
            # Gi·ªù th∆∞·ªùng t·ªëi ƒëa 8 ti·∫øng/ng√†y
            regular_hours = min(work_time, 8)
            overtime_hours = max(0, work_time - 8)
            
            result_data.append({
                'employee_name': employee,
                'date': date,
                'check_in_original': str(check_in),  # Chuy·ªÉn th√†nh string
                'check_out_original': str(check_out),  # Chuy·ªÉn th√†nh string
                'check_in_adjusted': str(adjusted_check_in),  # Chuy·ªÉn th√†nh string
                'total_time_with_lunch': round(total_hours, 2),
                'work_hours': round(work_time, 2),
                'regular_hours': round(regular_hours, 2),
                'overtime_hours': round(overtime_hours, 2),
                'number_of_punches': len(times)
            })
        else:
            # Kh√¥ng ƒë·ªß d·ªØ li·ªáu ch·∫•m c√¥ng
            result_data.append({
                'employee_name': employee,
                'date': date,
                'check_in_original': str(times[0]) if times else 'N/A',
                'check_out_original': 'N/A',
                'check_in_adjusted': 'N/A',
                'total_time_with_lunch': 0,
                'work_hours': 0,
                'regular_hours': 0,
                'overtime_hours': 0,
                'number_of_punches': len(times)
            })
    
    return pd.DataFrame(result_data)

def create_excel_report(df_final, df_raw):
    """
    T·∫°o file Excel b√°o c√°o v·ªõi nhi·ªÅu sheet
    """
    output = io.BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # Sheet 1: D·ªØ li·ªáu chi ti·∫øt
        df_final.to_excel(writer, sheet_name='Chi ti·∫øt gi·ªù c√¥ng & OT', index=False)
        
        # Sheet 2: Th·ªëng k√™ theo nh√¢n vi√™n
        employee_stats = df_final.groupby('employee_name').agg({
            'work_hours': ['sum', 'mean', 'count'],
            'regular_hours': ['sum', 'mean'],
            'overtime_hours': ['sum', 'mean']
        }).round(2)
        employee_stats.columns = [
            'T·ªïng gi·ªù LV', 'TB gi·ªù LV/ng√†y', 'S·ªë ng√†y l√†m',
            'T·ªïng gi·ªù th∆∞·ªùng', 'TB gi·ªù th∆∞·ªùng/ng√†y',
            'T·ªïng gi·ªù OT', 'TB gi·ªù OT/ng√†y'
        ]
        employee_stats.to_excel(writer, sheet_name='Th·ªëng k√™ nh√¢n vi√™n')
        
        # Sheet 3: Th·ªëng k√™ theo ng√†y
        daily_stats = df_final.groupby('date').agg({
            'work_hours': ['sum', 'mean'],
            'regular_hours': 'sum',
            'overtime_hours': 'sum',
            'employee_name': 'count'
        }).round(2)
        daily_stats.columns = ['T·ªïng gi·ªù LV', 'TB gi·ªù/ng∆∞·ªùi', 'T·ªïng gi·ªù th∆∞·ªùng', 'T·ªïng gi·ªù OT', 'S·ªë ng∆∞·ªùi']
        daily_stats.to_excel(writer, sheet_name='Th·ªëng k√™ theo ng√†y')
        
        # Sheet 4: Ranking OT
        ot_ranking = df_final.groupby('employee_name').agg({
            'overtime_hours': ['sum', 'mean', 'count']
        }).round(2)
        ot_ranking.columns = ['T·ªïng gi·ªù OT', 'TB gi·ªù OT/ng√†y', 'S·ªë ng√†y c√≥ OT']
        ot_ranking = ot_ranking.sort_values('T·ªïng gi·ªù OT', ascending=False)
        ot_ranking.to_excel(writer, sheet_name='Ranking OT')
        
        # Sheet 5: D·ªØ li·ªáu g·ªëc
        df_raw.to_excel(writer, sheet_name='D·ªØ li·ªáu g·ªëc', index=False)
    
    output.seek(0)
    return output

# Giao di·ªán ch√≠nh
def main():
    # Header
    st.markdown('<h1 class="main-header">‚è∞ H·ªÜ TH·ªêNG T√çNH GI·ªú C√îNG</h1>', unsafe_allow_html=True)
    
    # Sidebar - H∆∞·ªõng d·∫´n
    with st.sidebar:
        st.markdown("### üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        st.markdown("""
        1. **Upload file Excel** c√≥ c·∫•u tr√∫c:
           - C·ªôt "H·ªç t√™n": T√™n nh√¢n vi√™n
           - C·ªôt "Ng√†y ch·ªët": Ng√†y ch·∫•m c√¥ng
           - C·ªôt "Gi·ªù ch·ªët": Th·ªùi gian ch·∫•m c√¥ng
        
        2. **Quy t·∫Øc t√≠nh gi·ªù**:
           - Gi·ªù v√†o s·ªõm nh·∫•t: 7h30
           - Ngh·ªâ tr∆∞a: 1 ti·∫øng
           - Gi·ªù th∆∞·ªùng: T·ªëi ƒëa 8h/ng√†y
           - Gi·ªù OT: V∆∞·ª£t qu√° 8h/ng√†y
        
        3. **K·∫øt qu·∫£** s·∫Ω bao g·ªìm:
           - Chi ti·∫øt gi·ªù c√¥ng t·ª´ng ng√†y
           - Th·ªëng k√™ theo nh√¢n vi√™n
           - Th·ªëng k√™ theo ng√†y
           - Ranking OT
        """)
        
        st.markdown("### ‚öôÔ∏è C√†i ƒë·∫∑t")
        show_raw_data = st.checkbox("Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc", value=False)
        show_detailed_stats = st.checkbox("Hi·ªÉn th·ªã th·ªëng k√™ chi ti·∫øt", value=True)
    
    # Upload file
    st.markdown('<p class="sub-header">üìÅ Upload File Excel</p>', unsafe_allow_html=True)
    uploaded_file = st.file_uploader(
        "Ch·ªçn file Excel ch·∫•m c√¥ng",
        type=['xlsx', 'xls'],
        help="File Excel c·∫ßn c√≥ c√°c c·ªôt: H·ªç t√™n, Ng√†y ch·ªët, Gi·ªù ch·ªët"
    )
    
    if uploaded_file is not None:
        try:
            # ƒê·ªçc file Excel
            with st.spinner('ƒêang ƒë·ªçc file Excel...'):
                df = pd.read_excel(uploaded_file)
            
            # Hi·ªÉn th·ªã th√¥ng tin file
            st.markdown('<div class="success-box">‚úÖ ƒê√£ ƒë·ªçc file th√†nh c√¥ng!</div>', unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("S·ªë d√≤ng", len(df))
            with col2:
                st.metric("S·ªë c·ªôt", len(df.columns))
            with col3:
                st.metric("K√≠ch th∆∞·ªõc", f"{uploaded_file.size / 1024:.1f} KB")
            
            # Ki·ªÉm tra c·ªôt c·∫ßn thi·∫øt
            required_columns = ['H·ªç t√™n', 'Ng√†y ch·ªët', 'Gi·ªù ch·ªët']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                st.markdown(
                    f'<div class="warning-box">‚ö†Ô∏è Thi·∫øu c√°c c·ªôt: {", ".join(missing_columns)}</div>',
                    unsafe_allow_html=True
                )
                st.markdown("**C√°c c·ªôt hi·ªán c√≥:**")
                st.write(df.columns.tolist())
                return
            
            # Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u
            if show_raw_data:
                st.markdown('<p class="sub-header">üìã D·ªØ li·ªáu g·ªëc (5 d√≤ng ƒë·∫ßu)</p>', unsafe_allow_html=True)
                st.dataframe(df.head(), use_container_width=True)
            
            # X·ª≠ l√Ω d·ªØ li·ªáu
            with st.spinner('ƒêang x·ª≠ l√Ω v√† t√≠nh to√°n gi·ªù c√¥ng...'):
                df_processed = preprocess_timesheet_data(df)
                df_result = calculate_work_hours(df_processed)
            
            # Th·ªëng k√™ t·ªïng quan
            st.markdown('<p class="sub-header">üìä Th·ªëng k√™ t·ªïng quan</p>', unsafe_allow_html=True)
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(
                    f'<div class="metric-card"><h3>{df_result["employee_name"].nunique()}</h3><p>Nh√¢n vi√™n</p></div>',
                    unsafe_allow_html=True
                )
            
            with col2:
                st.markdown(
                    f'<div class="metric-card"><h3>{len(df_result)}</h3><p>Ng√†y l√†m vi·ªác</p></div>',
                    unsafe_allow_html=True
                )
            
            with col3:
                st.markdown(
                    f'<div class="metric-card"><h3>{df_result["work_hours"].sum():.1f}h</h3><p>T·ªïng gi·ªù LV</p></div>',
                    unsafe_allow_html=True
                )
            
            with col4:
                st.markdown(
                    f'<div class="metric-card"><h3>{df_result["overtime_hours"].sum():.1f}h</h3><p>T·ªïng gi·ªù OT</p></div>',
                    unsafe_allow_html=True
                )
            
            # Chi ti·∫øt k·∫øt qu·∫£
            st.markdown('<p class="sub-header">üìà K·∫øt qu·∫£ chi ti·∫øt</p>', unsafe_allow_html=True)
            
            # Tabs cho c√°c lo·∫°i b√°o c√°o
            tab1, tab2, tab3, tab4 = st.tabs(["üìã Chi ti·∫øt", "üë• Theo nh√¢n vi√™n", "üìÖ Theo ng√†y", "üèÜ Ranking OT"])
            
            with tab1:
                display_df = df_result[['employee_name', 'date', 'check_in_original', 'check_out_original', 
                                      'work_hours', 'regular_hours', 'overtime_hours']].copy()
                display_df.columns = ['Nh√¢n vi√™n', 'Ng√†y', 'Gi·ªù v√†o', 'Gi·ªù ra', 'Gi·ªù LV', 'Gi·ªù th∆∞·ªùng', 'Gi·ªù OT']
                st.dataframe(display_df, use_container_width=True)
            
            with tab2:
                employee_summary = df_result.groupby('employee_name').agg({
                    'work_hours': ['sum', 'mean', 'count'],
                    'regular_hours': 'sum',
                    'overtime_hours': 'sum'
                }).round(2)
                employee_summary.columns = ['T·ªïng gi·ªù LV', 'TB gi·ªù/ng√†y', 'S·ªë ng√†y', 'T·ªïng gi·ªù th∆∞·ªùng', 'T·ªïng gi·ªù OT']
                st.dataframe(employee_summary, use_container_width=True)
            
            with tab3:
                daily_summary = df_result.groupby('date').agg({
                    'work_hours': ['sum', 'mean'],
                    'regular_hours': 'sum',
                    'overtime_hours': 'sum',
                    'employee_name': 'count'
                }).round(2)
                daily_summary.columns = ['T·ªïng gi·ªù LV', 'TB gi·ªù/ng∆∞·ªùi', 'T·ªïng gi·ªù th∆∞·ªùng', 'T·ªïng gi·ªù OT', 'S·ªë ng∆∞·ªùi']
                st.dataframe(daily_summary, use_container_width=True)
            
            with tab4:
                ot_ranking = df_result.groupby('employee_name')['overtime_hours'].sum().sort_values(ascending=False)
                if ot_ranking.sum() > 0:
                    st.bar_chart(ot_ranking.head(10))
                    st.dataframe(ot_ranking.head(10).to_frame('T·ªïng gi·ªù OT'), use_container_width=True)
                else:
                    st.info("Kh√¥ng c√≥ nh√¢n vi√™n n√†o l√†m OT trong kho·∫£ng th·ªùi gian n√†y.")
            
            # T·∫°o v√† download file Excel
            st.markdown('<p class="sub-header">üíæ T·∫£i xu·ªëng b√°o c√°o</p>', unsafe_allow_html=True)
            
            excel_file = create_excel_report(df_result, df_processed)
            
            current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"bao_cao_gio_cong_{current_time}.xlsx"
            
            st.download_button(
                label="üì• T·∫£i xu·ªëng b√°o c√°o Excel",
                data=excel_file.getvalue(),
                file_name=filename,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )
            
            # C·∫£nh b√°o n·∫øu c√≥ d·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß
            incomplete_data = df_result[df_result['number_of_punches'] < 2]
            if len(incomplete_data) > 0:
                st.markdown(
                    f'<div class="warning-box">‚ö†Ô∏è Ph√°t hi·ªán {len(incomplete_data)} ng√†y c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng kh√¥ng ƒë·∫ßy ƒë·ªß (thi·∫øu gi·ªù v√†o ho·∫∑c gi·ªù ra)</div>',
                    unsafe_allow_html=True
                )
                with st.expander("Xem chi ti·∫øt c√°c ng√†y thi·∫øu d·ªØ li·ªáu"):
                    st.dataframe(incomplete_data[['employee_name', 'date', 'number_of_punches']])
            
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω file: {str(e)}")
            st.markdown("Vui l√≤ng ki·ªÉm tra l·∫°i format file Excel v√† th·ª≠ l·∫°i.")
    
    else:
        # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n khi ch∆∞a upload file
        st.markdown("""
        ### üöÄ B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng
        
        H·ªá th·ªëng n√†y gi√∫p b·∫°n t√≠nh to√°n gi·ªù c√¥ng t·ª´ d·ªØ li·ªáu ch·∫•m c√¥ng Excel m·ªôt c√°ch t·ª± ƒë·ªông v√† ch√≠nh x√°c.
        
        **C√°c t√≠nh nƒÉng ch√≠nh:**
        - ‚úÖ T·ª± ƒë·ªông t√≠nh gi·ªù l√†m vi·ªác v√† gi·ªù OT
        - ‚úÖ √Åp d·ª•ng quy t·∫Øc gi·ªù v√†o s·ªõm nh·∫•t 7h30
        - ‚úÖ T·ª± ƒë·ªông tr·ª´ 1 ti·∫øng ngh·ªâ tr∆∞a  
        - ‚úÖ Ph√¢n bi·ªát gi·ªù th∆∞·ªùng (8h) v√† gi·ªù OT
        - ‚úÖ B√°o c√°o chi ti·∫øt theo nh√¢n vi√™n v√† ng√†y
        - ‚úÖ Xu·∫•t file Excel v·ªõi nhi·ªÅu sheet th·ªëng k√™
        
        **ƒê·ªÉ b·∫Øt ƒë·∫ßu, h√£y upload file Excel c·ªßa b·∫°n ·ªü ph√≠a tr√™n! üëÜ**
        """)

if __name__ == "__main__":
    main()
